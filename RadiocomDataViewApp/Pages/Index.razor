@page "/"
@namespace RadiocomDataViewApp.Pages
@inject IJSRuntime JSRuntime;
@inject EnvironmentService env;
@inject NavigationManager NavManager;
@inject IRadiocomDataAggregateDataClient RadiocomDataAggregateDataClient ;

<div class="row">
	<div class="col-md-6 col-sm-12 p-4">
		@**@


		@*<Button Color="Color.Primary" @onclick="BarClick">Hover me</Button>*@

		@*<Button Outline="true" Color="Color.Dark" Clicked="@(async () => await HandleRedraw())">Redraw</Button>*@
		@*Margin="Margin.IsAuto.OnAll"*@
	<Row>
		<Column>
			<Container Class="text-center" >
				<Buttons><Button Active="true" Outline="true" Color="Color.Secondary">7 Days</Button><Button>3 Months</Button><Button>All Time</Button></Buttons>
			</Container>
			<br />
			<DashboardChartComponent YAxisLabel="YLabel" GenerateChartDatas="TopPlayedSongs" ChartTitle="Top Played Songs" OnBarElementClick="ClickBar"/>

		</Column>
		<Column>
			<Button Loading="true" Outline="true" Color="Color.Primary">7 Days</Button><Button>3 Months</Button><Button>All Time</Button>
			<DashboardChartComponent YAxisLabel="YLabel" GenerateChartDatas="TopPlayedSongs" ChartTitle="Top Played Artits" />
		</Column>
	</Row>
		
		

		@*<RadzenChart ColorScheme="ColorScheme.Divergent" @ref=chart @onclick="@((MouseEventArgs e) => logconsole(e, @chart))">
			<RadzenBarSeries Data="@revenue" CategoryProperty="Quarter" ValueProperty="Revenue">
				<TooltipTemplate>
					@context.Quarter: @context.Revenue
				</TooltipTemplate>
				<ChildContent>
					Top N Songs Played
				</ChildContent>

			</RadzenBarSeries>
			<RadzenCategoryAxis Visible="true">

			</RadzenCategoryAxis>
			<RadzenBarOptions Radius="5" />
			<RadzenTooltipOptions Style="color:black;" />


		</RadzenChart>*@
	</div>
</div>
<div>

	<Tooltip Text="Hello tooltip"><p>@env.IsDevelopment</p></Tooltip>
</div>

@functions
{
	//protected override async Task OnAfterRenderAsync(bool firstRender)
	//{
	//	Task t = base.OnAfterRenderAsync(firstRender);
	//		 await JSRuntime.InvokeVoidAsync("foo", "");


	//}

	//protected async override Task OnAfterRenderAsync(bool firstRender)
	//{
	//	var t = 


	//	return base.OnAfterRenderAsync(firstRender);;
	//}


	//protected override void OnInitialized()
	//{
	//	base.OnInitialized();
	//}
	//protected override Task OnInitializedAsync()
	//{
	//	Task t = base.OnInitializedAsync();

	//	return t;
	//}

	//private async Task logconsole(MouseEventArgs e)
	//{
	//	Console.WriteLine("logger");
	//	//chart.Reload();


	//}
}



@code {




	




	//	private object chart;


	//	class DataItem
	//	{
	//		public string Quarter { get; set; }
	//		public double Revenue { get; set; }
	//	}

	//	DataItem[] revenue = new DataItem[]
	//	{
	//	  new DataItem
	//	  {
	//		  Quarter = "Q1",
	//		  Revenue = 234000
	//	  },
	//	  new DataItem
	//	  {
	//		  Quarter = "Q2",
	//		  Revenue = 284000
	//	  },
	//	  new DataItem
	//	  {
	//		  Quarter = "Q3",
	//		  Revenue = 274000
	//	  },
	//	  new DataItem
	//	  {
	//		  Quarter = "Q4",
	//		  Revenue = 294000
	//	  }
	//};
}
